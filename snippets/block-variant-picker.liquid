<div class="product-block" {% if block.settings.product_dynamic_variants_enable %}data-dynamic-variants-enabled{% endif %} {{ block.shopify_attributes }}>
  {%- comment -%} Controllo varianti colore {%- endcomment -%}
  {%- if block.settings.show_color_variants and product.metafields.custom.related_products != blank -%}
    {%- liquid
      assign related_handles_string = product.metafields.custom.related_products | strip
      assign related_handles = related_handles_string | split: ','
      assign size_option_index = -1
      
      for option in product.options_with_values
        assign option_downcase = option.name | downcase
        if option_downcase contains 'size' or option_downcase contains 'taglia'
          assign size_option_index = forloop.index0
          break
        endif
      endfor
      
      assign color_count = 0
      for handle in related_handles
        assign handle_clean = handle | strip
        assign variant_product = all_products[handle_clean]
        if variant_product != blank and variant_product.available
          assign color_count = color_count | plus: 1
        endif
      endfor
    -%}
    
    <div class="fbi-variants-section" data-size-index="{{ size_option_index }}">
      {%- comment -%} Header sezione - Nascosto via CSS {%- endcomment -%}
      <div class="fbi-header">
        <h4 class="fbi-title">{{ block.settings.section_title }}</h4>
        {%- if block.settings.show_selected_size and size_option_index != -1 -%}
          <span class="fbi-size-indicator"></span>
        {%- endif -%}
      </div>
      
      {%- comment -%} Variant picker originale con stili custom {%- endcomment -%}
      {%- unless product.has_only_default_variant -%}
        <div class="fbi-original-variants {% if block.settings.auto_fit_variants_mobile %}fbi-auto-fit-mobile{% endif %} {% if block.settings.auto_fit_variants_desktop %}fbi-auto-fit-desktop{% endif %}">
          {%- for option in product.options_with_values -%}
            {%- liquid
              if block.settings.color_swatches
                assign is_color = false
                assign color_option_index = 0
                assign swatch_trigger = 'products.general.color_swatch_trigger' | t | downcase
                assign color_option_index = forloop.index0
                assign downcased_option = option.name | downcase
                if downcased_option contains swatch_trigger
                  assign is_color = true
                elsif swatch_trigger == 'color' and downcased_option contains 'colour'
                  assign is_color = true
                endif
              endif
            -%}
            
            {%- if block.settings.picker_type == 'button' -%}
              {%- render 'variant-button',
                block: block,
                product: product,
                form_id: form_id,
                section_id: section_id,
                option: option,
                forloop: forloop,
                variant_labels: block.settings.variant_labels,
                is_color: is_color,
                color_option_index: color_option_index,
                connect_to_sizechart: connect_to_sizechart,
                sizechart_index: sizechart_index
              -%}
            {%- else -%}
              {%- render 'variant-dropdown',
                product: product,
                form_id: form_id,
                section_id: section_id,
                option: option,
                forloop: forloop,
                variant_labels: block.settings.variant_labels
              -%}
            {%- endif -%}
          {%- endfor -%}
        </div>
      {%- endunless -%}
      
      {%- comment -%} Alert per taglia non disponibile {%- endcomment -%}
      <div class="fbi-alert">
        <svg width="16" height="16" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
        </svg>
        <span>{{ block.settings.size_alert_text }}</span>
      </div>
      <h4 class="fbi-title">{{ block.settings.section_title_2 }} <span class="fbi-size-indicator fbi-title"></span></h4>
      {%- comment -%} Griglia varianti colore con swatch immagini {%- endcomment -%}
      <div class="fbi-color-grid" 
           data-color-count="{{ color_count }}"
           {% if block.settings.auto_fit_colors_mobile %}data-auto-fit-mobile{% endif %}
           {% if block.settings.auto_fit_colors_desktop %}data-auto-fit-desktop{% endif %}>
        {%- for handle in related_handles -%}
          {%- assign handle_clean = handle | strip -%}
          {%- assign variant_product = all_products[handle_clean] -%}
          
          {%- if variant_product != blank and variant_product.available -%}
            {%- assign variant_title = variant_product.title -%}
            {%- if block.settings.remove_string != blank -%}
              {%- assign variant_title = variant_title | remove: block.settings.remove_string | strip -%}
            {%- endif -%}
            
            {%- comment -%} Logica per determinare quale immagine usare {%- endcomment -%}
            {%- liquid
              assign swatch_image = nil
              
              # Prima controlla se c'Ã¨ un metafield personalizzato per lo swatch
              if block.settings.use_metafield_swatch and variant_product.metafields.custom.swatch_image != blank
                assign swatch_image = variant_product.metafields.custom.swatch_image
              # Altrimenti usa la seconda immagine se abilitato
              elsif block.settings.use_second_image_swatch and variant_product.images.size > 1
                assign swatch_image = variant_product.images[1]
              # Fallback all'immagine principale
              else
                assign swatch_image = variant_product.featured_image
              endif
            -%}
            
            <a href="{{ variant_product.url }}" 
               class="fbi-color-item {% if block.settings.enable_image_swatches %}fbi-has-swatch{% endif %}"
               data-handle="{{ handle_clean }}"
               data-variants="{{ variant_product.variants | json | escape }}">
              
              <div class="fbi-color-image">
                {%- if swatch_image -%}
                  <img src="{{ swatch_image | img_url: '300x300' }}"
                       alt="{{ variant_product.title | escape }}"
                       loading="lazy">
                {%- else -%}
                  {{ 'product-1' | placeholder_svg_tag }}
                {%- endif -%}
                
                {%- comment -%} Swatch circolare sovrapposto se abilitato {%- endcomment -%}
                {%- if block.settings.enable_image_swatches -%}
                  <div class="fbi-swatch-overlay">
                    {%- liquid
                      assign overlay_swatch_image = nil
                      
                      # Determina quale immagine usare per lo swatch overlay
                      if block.settings.use_metafield_swatch and variant_product.metafields.custom.swatch_image != blank
                        assign overlay_swatch_image = variant_product.metafields.custom.swatch_image
                      elsif block.settings.use_second_image_swatch and variant_product.images.size > 1
                        assign overlay_swatch_image = variant_product.images[1]
                      else
                        assign overlay_swatch_image = variant_product.featured_image
                      endif
                    -%}
                    
                    {%- if overlay_swatch_image -%}
                      <img src="{{ overlay_swatch_image | img_url: '80x80' }}"
                           alt="{{ variant_product.title | escape }} swatch"
                           loading="lazy">
                    {%- endif -%}
                  </div>
                {%- endif -%}
                
                <div class="fbi-overlay">
                  <span>{{ block.settings.unavailable_text }}</span>
                </div>
              </div>
              
              <div class="fbi-color-info">
                <span class="fbi-color-name">{{ variant_title }}</span>
                {%- if block.settings.show_prices -%}
                  <span class="fbi-color-price">
                    {%- if variant_product.compare_at_price > variant_product.price -%}
                      <s>{{ variant_product.compare_at_price | money }}</s>
                      {{ variant_product.price | money }}
                    {%- else -%}
                      {{ variant_product.price | money }}
                    {%- endif -%}
                  </span>
                {%- endif -%}
              </div>
            </a>
          {%- endif -%}
        {%- endfor -%}
      </div>
    </div>
    
    <style>
      /* Base styles */
      .fbi-variants-section {
        margin-top: {{ block.settings.section_spacing }}px;
        padding: 0px !important;
        background: {{ block.settings.section_background }};
        border-radius: {{ block.settings.border_radius }}px;
        {% if block.settings.show_border %}
          border: 1px solid {{ block.settings.border_color }};
        {% endif %}
      }

      h4.fbi-title {
        margin-bottom: 11px;
      }
      
      /* Header - Nascosto 
      .fbi-header {
        isplay: none !important;
      }*/
      
      .fbi-title {
        font-size: {{ block.settings.title_size }}px;
        font-weight: 600;
        color: {{ block.settings.text_color }};
        margin: 0;
      }
      
      .fbi-size-indicator {
        color: {{ block.settings.accent_color }};
      }
      
      .fbi-size-indicator:before {
        content: '{{ block.settings.size_prefix }}';
      }
      
      /* Original variants */
      .fbi-original-variants {
        margin-bottom: 24px;
      }
      
      /* Auto-fit variants */
      @media (max-width: 767px) {
        .fbi-auto-fit-mobile .variant-input-wrap {
          display: flex !important;
          flex-wrap: wrap !important;
          gap: {{ block.settings.variant_gap }}px !important;
        }
        
        .fbi-auto-fit-mobile .variant-input {
          flex: 1 1 auto !important;
          min-width: 60px !important;
        }
      }
      
      @media (min-width: 768px) {
        .fbi-auto-fit-desktop .variant-input-wrap {
          display: flex !important;
          flex-wrap: wrap !important;
          gap: {{ block.settings.variant_gap }}px !important;
        }
        
        .fbi-auto-fit-desktop .variant-input {
          flex: 1 1 auto !important;
          min-width: 80px !important;
        }
      }
      
      /* Variant label styles 
      .variant-wrapper.js label.variant__label {
        display: none !important;
      }*/
      
      label.variant__button-label {
        border-radius: 12px !important;
      }
      
      label.variant__button-label:hover {
        background-color: #E5DDD5;
        color: #3E3E3E;
      }
      
      .variant-input-wrap input[type=radio]:checked+label {
        box-shadow: 0 0 0 1px var(--colorTextBody) !important;
        color: #ffffff !important;
        background-color: #C33A32 !important;
        font-weight: 600 !important;
      }
      
      /* Alert */
      .fbi-alert {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 12px 16px;
        background: #FEF3F2;
        border-radius: 8px;
        margin-bottom: 20px;
        font-size: 14px;
        color: #991B1B;
      }
      
      .fbi-alert svg {
        flex-shrink: 0;
        color: #DC2626;
      }
      
      /* Color grid */
      .fbi-color-grid {
        display: grid;
        grid-template-columns: repeat({{ block.settings.colors_per_row_mobile }}, 1fr);
        gap: {{ block.settings.grid_gap }}px;
      }
      
      /* Auto-fit per colori mobile */
      @media (max-width: 767px) {
        .fbi-color-grid[data-auto-fit-mobile] {
          display: flex;
          flex-wrap: wrap;
          gap: {{ block.settings.grid_gap }}px;
        }
        
        .fbi-color-grid[data-auto-fit-mobile] .fbi-color-item {
          flex: 1 1 auto;
          min-width: 120px;
        }
      }
      
      @media (min-width: 768px) {
        .fbi-color-grid {
          grid-template-columns: repeat({{ block.settings.colors_per_row_desktop }}, 1fr);
        }
        
        /* Auto-fit per colori desktop */
        .fbi-color-grid[data-auto-fit-desktop] {
          display: flex;
          flex-wrap: wrap;
          gap: {{ block.settings.grid_gap }}px;
        }
        
        .fbi-color-grid[data-auto-fit-desktop] .fbi-color-item {
          flex: 1 1 auto;
          min-width: 150px;
          max-width: 250px;
        }
      }
      
      /* Color item */
      .fbi-color-item {
        text-decoration: none;
        color: inherit;
        transition: all 0.2s ease;
      }
      
      .fbi-color-item:hover {
        transform: translateY(-2px);
      }
      
      .fbi-color-item.size-unavailable {
        opacity: 0.5;
        pointer-events: none;
      }
      
      .fbi-color-image {
        position: relative;
        padding-bottom: 100%;
        overflow: hidden;
        border-radius: {{ block.settings.image_radius }}px;
        background: #f5f5f5;
        border: 1px solid {{ block.settings.border_color }};
        transition: border-color 0.2s ease;
      }
      
      .fbi-color-image:hover {
        border: 1px solid black !important;
      }
      
      .fbi-color-image img {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
      }
      
      /* Swatch Overlay Styles */
      .fbi-swatch-overlay {
        position: absolute;
        bottom: {{ block.settings.swatch_position }}px;
        right: {{ block.settings.swatch_position }}px;
        width: {{ block.settings.swatch_size }}px;
        height: {{ block.settings.swatch_size }}px;
        border-radius: {% if block.settings.swatch_shape == 'circle' %}50%{% else %}{{ block.settings.swatch_border_radius }}px{% endif %};
        overflow: hidden;
        border: 2px solid #FFFFFF;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
        z-index: 2;
        transition: transform 0.2s ease;
      }
      
      .fbi-has-swatch:hover .fbi-swatch-overlay {
        transform: scale(1.1);
      }
      
      .fbi-swatch-overlay img {
        width: 100%;
        height: 100%;
        object-fit: cover;
      }
      
      /* Nascondi swatch su mobile se richiesto */
      {% if block.settings.hide_swatch_mobile %}
      @media (max-width: 767px) {
        .fbi-swatch-overlay {
          display: none;
        }
      }
      {% endif %}
      
      .fbi-overlay {
        position: absolute;
        inset: 0;
        background: rgba(255, 255, 255, 0.9);
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: opacity 0.2s;
      }
      
      .size-unavailable .fbi-overlay {
        opacity: 1;
      }
      
      .fbi-overlay span {
        font-size: 12px;
        font-weight: 600;
        color: #6B7280;
        text-transform: uppercase;
        letter-spacing: 0.05em;
      }
      
      /* Color info */
      .fbi-color-info {
        padding: 8px 0px 0px 0px !important;
        text-align: {{ block.settings.text_align }};
      }
      
      .fbi-color-name {
        display: block;
        font-size: {{ block.settings.name_size }}px;
        color: {{ block.settings.text_color }};
        margin-bottom: 0px !important;
        -webkit-line-clamp: var(--line-clamp-count, 1) !important;
        -webkit-box-orient: vertical !important;
        display: -webkit-box !important;
        overflow: hidden !important;
        {% if block.settings.uppercase_names %}
          text-transform: uppercase;
          letter-spacing: 0.05em;
        {% endif %}
      }
      
      .fbi-color-price {
        font-size: {{ block.settings.price_size }}px;
        color: {{ block.settings.text_color }};
      }
      
      .fbi-color-price s {
        color: #9CA3AF;
        margin-right: 4px;
      }
      
      /* Bottoni disabilitati */
      button.btn.btn--full.add-to-cart.disabled {
        border: 1px solid #3E3E3E !important;
        color: #3E3E3E !important;
      }
      
      button.btn.btn--full.add-to-cart.disabled:hover {
        background-color: #F6F6F6 !important;
      }
      
      /* Mobile specific */
      @media only screen and (max-width: 589px) {
        .hero-collections__grid {
          display: flex !important;
          flex-wrap: nowrap !important;
          padding: 0 !important;
        }
        
        .btn, .rte .btn, .shopify-payment-button .shopify-payment-button__button--unbranded {
          font-size: max(calc(var(--typeBaseSize) - 5px), 15px);
          padding: 16px 17px !important;
        }
      }
    </style>
    
    <script>
      (function() {
        const section = document.querySelector('.fbi-variants-section');
        if (!section) return;
        
        const sizeIndex = parseInt(section.dataset.sizeIndex);
        const hasSize = sizeIndex >= 0;
        const alert = section.querySelector('.fbi-alert');
        const sizeIndicator = section.querySelector('.fbi-size-indicator');
        const colorItems = section.querySelectorAll('.fbi-color-item');
        
        function getSelectedSize() {
          if (!hasSize) return null;
          
          const checked = document.querySelector('input[type="radio"]:checked');
          if (checked) return checked.value;
          
          const select = document.querySelector('select[name="id"]');
          if (select) {
            const text = select.options[select.selectedIndex].text;
            const match = text.match(/^\s*(\S+)/);
            return match ? match[1] : null;
          }
          
          return null;
        }
        
        function updateVariants() {
          const selectedSize = getSelectedSize();
          
          // Update size indicator
          if (sizeIndicator && selectedSize) {
            sizeIndicator.textContent = selectedSize;
            sizeIndicator.style.display = 'inline';
          } else if (sizeIndicator) {
            sizeIndicator.style.display = 'none';
          }
          
          if (!hasSize) return;
          
          let hasAvailable = false;
          
          // Check each color variant
          colorItems.forEach(item => {
            const variantsData = item.dataset.variants;
            if (!variantsData) return;
            
            try {
              const variants = JSON.parse(variantsData);
              let isAvailable = false;
              
              if (!selectedSize) {
                isAvailable = true;
              } else {
                for (const variant of variants) {
                  const variantSize = variant[`option${sizeIndex + 1}`];
                  if (variantSize === selectedSize && variant.available) {
                    isAvailable = true;
                    hasAvailable = true;
                    break;
                  }
                }
              }
              
              item.classList.toggle('size-unavailable', !isAvailable);
            } catch (e) {
              console.error('Error parsing variant data:', e);
            }
          });
          
          // Show/hide alert
          if (alert) {
            alert.style.display = (selectedSize && !hasAvailable) ? 'flex' : 'none';
          }
        }
        
        // Initial update
        updateVariants();
        
        // Listen for changes
        document.addEventListener('variant:change', updateVariants);
        
        // Listen for form changes
        const forms = document.querySelectorAll('form[action*="/cart/add"]');
        forms.forEach(form => {
          form.addEventListener('change', () => {
            setTimeout(updateVariants, 100);
          });
        });
      })();
    </script>
  {%- else -%}
    {%- comment -%} Variant picker standard se non ci sono varianti colore {%- endcomment -%}
    {%- unless product.has_only_default_variant -%}
      {%- for option in product.options_with_values -%}
        {%- liquid
          if block.settings.color_swatches
            assign is_color = false
            assign color_option_index = 0
            assign swatch_trigger = 'products.general.color_swatch_trigger' | t | downcase
            assign color_option_index = forloop.index0
            assign downcased_option = option.name | downcase
            if downcased_option contains swatch_trigger
              assign is_color = true
            elsif swatch_trigger == 'color' and downcased_option contains 'colour'
              assign is_color = true
            endif
          endif
        -%}
        
        {%- if block.settings.picker_type == 'button' -%}
          {%- render 'variant-button',
            block: block,
            product: product,
            form_id: form_id,
            section_id: section_id,
            option: option,
            forloop: forloop,
            variant_labels: block.settings.variant_labels,
            is_color: is_color,
            color_option_index: color_option_index,
            connect_to_sizechart: connect_to_sizechart,
            sizechart_index: sizechart_index
          -%}
        {%- else -%}
          {%- render 'variant-dropdown',
            product: product,
            form_id: form_id,
            section_id: section_id,
            option: option,
            forloop: forloop,
            variant_labels: block.settings.variant_labels
          -%}
        {%- endif -%}
      {%- endfor -%}
    {%- endunless -%}
  {%- endif -%}
</div>